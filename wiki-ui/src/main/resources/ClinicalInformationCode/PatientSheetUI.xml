<?xml version="1.0" encoding="UTF-8"?>
<xwikidoc>
<web>ClinicalInformationCode</web>
<name>PatientSheetUI</name>
<language></language>
<defaultLanguage></defaultLanguage>
<translation>0</translation>
<parent>ClinicalInformationCode.PatientClass</parent>
<creator>xwiki:XWiki.Admin</creator>
<author>xwiki:XWiki.Admin</author>
<customClass></customClass>
<contentAuthor>xwiki:XWiki.Admin</contentAuthor>
<creationDate>1323751780000</creationDate>
<date>1324319943000</date>
<contentUpdateDate>1324319943000</contentUpdateDate>
<version>1.1</version>
<title></title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/2.0</syntaxId>
<hidden>false</hidden>
<object>
<class>
<name>XWiki.JavaScriptExtension</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<cache>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>cache</name>
<number>5</number>
<prettyName>Caching policy</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>long|short|default|forbid</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</cache>
<code>
<disabled>0</disabled>
<name>code</name>
<number>2</number>
<prettyName>Code</prettyName>
<rows>20</rows>
<size>50</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</code>
<name>
<disabled>0</disabled>
<name>name</name>
<number>1</number>
<prettyName>Name</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</name>
<parse>
<disabled>0</disabled>
<displayFormType>select</displayFormType>
<displayType>yesno</displayType>
<name>parse</name>
<number>4</number>
<prettyName>Parse content</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</parse>
<use>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>use</name>
<number>3</number>
<prettyName>Use this extension</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</use>
</class>
<name>ClinicalInformationCode.PatientSheetUI</name>
<number>0</number>
<className>XWiki.JavaScriptExtension</className>
<guid>5ec4907f-5197-4bd5-aa8d-18396012e126</guid>
<property>
<cache>long</cache>
</property>
<property>
<code>document.observe('xwiki:dom:loaded', function() {
  var deleteTool = $('tmActionDelete');
  if (!deleteTool) {
    return false;
  }
  deleteTool.observe('click', function(clickEvent) {
    clickEvent.stop();
    var item = clickEvent.element(); 
    item.blur();
    if (item.disabled) {
      // Do nothing if the button was already clicked and it's waiting for a response from the server.
      return;
    } else {
      var url = item.readAttribute('href') + "?confirm=1&amp;form_token=$!{services.csrf.getToken()}" + (Prototype.Browser.Opera ? "" : "&amp;ajax=1");
      new XWiki.widgets.ConfirmedAjaxRequest(
        /* Ajax request URL */
        url,
        /* Ajax request parameters */
        {
          onCreate : function() {
            // Disable the button, to avoid a cascade of clicks from impatient users
            item.disabled = true;
          },
          onSuccess : function() {
            // Go to space WebHome
            window.location = new XWiki.Document('WebHome', XWiki.Document.currentSpace).getURL('view');
          },
          onFailure : function() {
            // Better luck next time!
            item.disabled = false;
          }
        },
        /* Interaction parameters */
        {
          confirmationText: "$msg.get('core.recyclebin.confirm')"
        }
      );
    }
  });
});</code>
</property>
<property>
<name>Confirmed AJAX deletion</name>
</property>
<property>
<parse>1</parse>
</property>
<property>
<use>currentPage</use>
</property>
</object>
<object>
<class>
<name>XWiki.JavaScriptExtension</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<cache>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>cache</name>
<number>5</number>
<prettyName>Caching policy</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>long|short|default|forbid</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</cache>
<code>
<disabled>0</disabled>
<name>code</name>
<number>2</number>
<prettyName>Code</prettyName>
<rows>20</rows>
<size>50</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</code>
<name>
<disabled>0</disabled>
<name>name</name>
<number>1</number>
<prettyName>Name</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</name>
<parse>
<disabled>0</disabled>
<displayFormType>select</displayFormType>
<displayType>yesno</displayType>
<name>parse</name>
<number>4</number>
<prettyName>Parse content</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</parse>
<use>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>use</name>
<number>3</number>
<prettyName>Use this extension</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</use>
</class>
<name>ClinicalInformationCode.PatientSheetUI</name>
<number>1</number>
<className>XWiki.JavaScriptExtension</className>
<guid>b9d3abcd-397a-423d-a1f6-b5b9ca6db51b</guid>
<property>
<cache>long</cache>
</property>
<property>
<code>document.observe('xwiki:dom:loaded', function() {
  var tocElement = $('table-of-contents')
  if (!tocElement) {return;}
  var titleLink = tocElement.down('li a');//first link
  if (titleLink) {
    titleLink.href = '#document-title';
  }
  var crtContents = tocElement.down('ul ul');
  if (!crtContents) {return;}
  var completeContents = new Element('ul');
  var crtContainer = completeContents;
  var crtLevel = 2;
  $$('h2[id], h3[id]').each(function(title) {
    var target = title.id;
    var myLevel = parseInt(title.nodeName.substring(1));
    var tocLine = new Element('li').update(new Element('a', {'href' : '#' + target}).update(title.innerHTML));
    if (myLevel &lt; crtLevel) {
       crtContainer = crtContainer.up('ul');
    } else if (myLevel &gt; crtLevel) {
      var lastTocLine = crtContainer.down('li:last-child');
      if (!lastTocLine) {
        lastTocLine = new Element('li');
        crtContainer.insert({'bottom' : lastTocLine});
      }
      crtContainer = new Element('ul');
      lastTocLine.insert({'bottom' : crtContainer});
    }
    crtLevel = myLevel;
    crtContainer.insert({'bottom' : tocLine});
  });
  crtContents.replace(completeContents);

  // JS show/hide of ToC, to avoid jumps in Chrome
  var tocTrigger = $('tmToC');
  if (tocTrigger) {
    tocTrigger.observe('click', function(event) {
      event.stop();
      tocElement.style.display= 'block';
      tocElement.style.visibility= 'visible';
    });
  }
  var tocHideTriggers = tocElement.select('.hide-toc a');
  tocHideTriggers.invoke('observe', 'click', function(event) {
     event.stop();
     tocElement.style.display= '';
     tocElement.style.visibility= 'hidden';
  });
  var tocLinks = tocElement.select('ul a');
  tocLinks.invoke('observe', 'click', function(event) {
     //tocElement.style.display= '';
     //tocElement.select('.hide-toc a').click();
  });
});</code>
</property>
<property>
<name>Fix for the incomplete ToC</name>
</property>
<property>
<parse></parse>
</property>
<property>
<use>currentPage</use>
</property>
</object>
<object>
<class>
<name>XWiki.JavaScriptExtension</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<cache>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>cache</name>
<number>5</number>
<prettyName>Caching policy</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>long|short|default|forbid</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</cache>
<code>
<disabled>0</disabled>
<name>code</name>
<number>2</number>
<prettyName>Code</prettyName>
<rows>20</rows>
<size>50</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</code>
<name>
<disabled>0</disabled>
<name>name</name>
<number>1</number>
<prettyName>Name</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</name>
<parse>
<disabled>0</disabled>
<displayFormType>select</displayFormType>
<displayType>yesno</displayType>
<name>parse</name>
<number>4</number>
<prettyName>Parse content</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</parse>
<use>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>use</name>
<number>3</number>
<prettyName>Use this extension</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</use>
</class>
<name>ClinicalInformationCode.PatientSheetUI</name>
<number>2</number>
<className>XWiki.JavaScriptExtension</className>
<guid>5d84bae3-f15f-41cd-b99b-5e0a2bbf27d4</guid>
<property>
<cache>long</cache>
</property>
<property>
<code>var highlightChecked = function(element) {
      var subsection = element.up('.subsection');
      if (subsection) {
	var subsectionTitle = subsection.previous('label.section');
      }
      if (element.checked) {
        element.up('label').addClassName('selected');
	if (subsectionTitle) {
	  subsectionTitle.addClassName('selected');
	}
      } else {
        element.up('label').removeClassName('selected');
	if (subsectionTitle &amp;&amp; !(subsectionTitle.next('.subsection') &amp;&amp; subsectionTitle.next('.subsection').down('.selected'))) {
	  subsectionTitle.removeClassName('selected');
	}
      }
};
var enableHighlightChecked = function(element) {
      highlightChecked(element);
      ['click', 'change', 'suggest:change'].each(function(eventName) {
        element.observe(eventName, highlightChecked.bind(element,element));
      });
};

var restoreCategory = function (element) {
  var parentElement = element.up('.accepted-suggestions li');
  var selector = '';
  var ignoredCategories = this.suggest &amp;&amp; this.suggest.options &amp;&amp;
          this.suggest.options.queryProcessor &amp;&amp; this.suggest.options.queryProcessor.restriction &amp;&amp;
          this.suggest.options.queryProcessor.restriction.term_category;
  if (parentElement) {
    parentElement.select('.term-category input[type=hidden]').each(function (item) {
      if (ignoredCategories &amp;&amp; ignoredCategories.indexOf(item.value) &gt;= 0) return;
      selector += 'input.suggested[name^=' + element.name + '] + input[type=hidden][name=_category][value*=' + item.value +'], '
    });
  }
  var matchingCategory = document.documentElement.down(selector);
  if (matchingCategory) {
    var matchingList = matchingCategory.previous('ul.accepted-suggestions');
    if (matchingList) {
      matchingList.insert(parentElement);
    }
  }
  enableHighlightChecked(element);
  if (typeof (this.ensureVisible) == 'function') {
    this.ensureVisible(element, true);
  } else {
    element.scrollTo();
  }
}

var findPropertyField = function(name) {
  if ($('prefix'))
    return $($('prefix').value + name);
  return null;
}

var findFormElementForPhenotype = function(id) {
  return $($('prefix').value + 'phenotype_' + id);
};

var isPhenotypeSelected = function (id) {
  var elt = findFormElementForPhenotype(id);
  return (elt &amp;&amp; elt.checked);
};
var unselectPhenotype = function (id) {
  var targetElt = findFormElementForPhenotype(id);
  if (targetElt &amp;&amp; targetElt.checked) {
    targetElt.click();
  }
};

document.observe('dom:loaded', function() {
    // ------------------------------------------------------------------------
    // Dropdown behavior...
    document.observe('click', function (event) {
       if (event.element() &amp;&amp; !event.element().hasClassName('.dropdown')  &amp;&amp; !event.element().up('.dropdown')) {
         $$('.dropdown').each(function(item) {
           item.previous('label').down('.expand-tool').click();
         });
       }
    });

    // ------------------------------------------------------------------------
    // Selected term highlighting 
    $$('label.term-label input[type=checkbox]').each(function (input) {
      enableHighlightChecked(input);
      input.observe('click', function(event) {
          $$('input[type=checkbox][value=' + event.element().value +']').each(function(item) {
            if (item.checked != event.element().checked) {
              item.click();
            }
          });
      });
    });
    // ------------------------------------------------------------------------
    // Sync dynamic subtree selections
    var fieldName = '';
    var syncTermCategory = function(term) {
      var field = document.documentElement.down('label.term-label.dropdown-root input[type=checkbox][name=' + fieldName + '][value=' + term +']');
      if (field) {
        var subtermsInCategory = $$('label.accepted-suggestion[for^=' + fieldName + '_] + .term-category input[type=hidden][value=' + term + ']');
        var selectedSubterms  = 0;
        var countIfSelectedSubterm = function (categoryElement) {
           var subtermElement = categoryElement.up('li').down('label.accepted-suggestion input[type=checkbox]');
           if (subtermElement &amp;&amp; subtermElement.checked) {
             ++selectedSubterms;
           }
        };
        subtermsInCategory.each(countIfSelectedSubterm);
        if (selectedSubterms &gt; 0) {
          field.up('label').addClassName('subterm-selected');
        } else {
          field.up('label').removeClassName('subterm-selected');
        }
      }
    };
    document.observe('custom:selection:changed', function(event) {
      var categories = event.memo &amp;&amp; event.memo.categories;
      if (categories) {
         fieldName = event.memo.fieldName || '';
         categories.each(syncTermCategory);
      }
    });
    
    // ------------------------------------------------------------------------
    // Behavior of the quick search box
    
    StickyBox = Class.create({
    options : {
      shadowSize : 6,
      isSticky : function(element) {return true}
    },
    initialize : function(stickyElement, stickyAreaElement, options) {
      this.stickyElement = stickyElement;
      this.stickyAreaElement = stickyAreaElement;
      if (this.stickyElement &amp;&amp; this.stickyAreaElement) {
        this.options = Object.extend(Object.clone(this.options), options || { });
        this.resetPosition = this.resetPosition.bindAsEventListener(this);
        Event.observe(window, 'scroll', this.resetPosition);
        Event.observe(window, 'resize', this.resetPosition);
        if (typeof(this.options.makeDefault) == 'function') {
          thid.makeDefault = this.options.makeDefault.bind(this);
        }
        this.resetPosition();
      }
    },
    
    resetPosition : function() {
      if (!this.options.isSticky(this.stickyElement)) {
        return;
      }
      this.boxHeight = this.stickyElement.getHeight();
      this.boxWidth = this.stickyElement.getWidth();
      this.boxMinTop = this.stickyAreaElement.cumulativeOffset().top + this.options.shadowSize ;
      this.boxMaxTop = this.stickyAreaElement.cumulativeOffset().top + this.stickyAreaElement.getHeight();
      this.boxLeft = this.stickyElement.cumulativeOffset().left;
      var relativeContentPosition = this.stickyAreaElement.viewportOffset().top;
      this.direction = 0;
      if (this.stickyAreaElement._prevPosition) {
        if (this.stickyAreaElement._prevPosition &gt; relativeContentPosition) {
          this.direction = 1;
        } else if (this.stickyAreaElement._prevPosition &lt; relativeContentPosition) {
          this.direction = -1;
        }
      }
      if ((this.options.isSticky(this.stickyElement) || this.direction == 1) &amp;&amp;
        document.viewport.getScrollOffsets().top &gt;= this.boxMinTop &amp;&amp;
        document.viewport.getScrollOffsets().top &lt; this.boxMaxTop) {
        this.makeFixed();
      } else if ((this.options.isSticky(this.stickyElement) || this.direction == -1) &amp;&amp;
        document.viewport.getScrollOffsets().top &gt;= this.boxMaxTop) {
        this.makeAbsolute();
      } else {
        this.makeDefault();
      }
      this.stickyAreaElement._prevPosition = relativeContentPosition;
    },
    
    makeFixed : function() {
      if (this.stickyElement.style.position != 'fixed') {
        this.stickyElement.style.left = this.boxLeft + 'px';
        this.stickyElement.style.width = (this.boxWidth) + 'px';
        this.stickyElement.style.top = this.options.shadowSize + 'px';
        this.stickyElement.style.right = '';
        this.stickyElement.style.position = 'fixed';
      }
    },
    makeAbsolute : function(top) {
      if (this.stickyElement.style.position != 'absolute' || this.stickyElement.style.top != top + 'px'){
        top = top || this.stickyAreaElement.getHeight();
        this.stickyElement.style.top = top + 'px';
        this.stickyElement.style.left = '';
        this.stickyElement.style.right = '';
        this.stickyElement.style.position = 'absolute';
      }       
    },
    makeDefault : function() {
      if (this.stickyElement.style.position != ''){
        this.stickyElement.style.position = '';
        this.stickyElement.style.top = '';
        this.stickyElement.style.left = '';
        this.stickyElement.style.right = '';
        this.stickyElement.style.width = '';
      }       
    },
    isFixed: function() {
      return (this.stickyElement.style.position == 'fixed');
    },
    isAbsolute: function() {
      return (this.stickyElement.style.position == 'absolute');
    },
    isDefault: function() {
      return (this.stickyElement.style.position == '');
    }
  });
  
  var qsBox = $('quick-search-box');
  if (qsBox) {
    var content = qsBox.next('div');
    if (content) {
      qsBox.__x_qsInput = qsBox.down('input[type=text]') || {};
      var qsSticky = new StickyBox(qsBox, content, {isSticky : function(element) {return !element.__x_qsInput._activeSuggest} });
      Event.observe(document, 'ms:suggest:containerCreated', function(event) {
        if (event.memo.suggest.fld == qsBox.__x_qsInput) {
          qsBox.__x_qsInput._activeSuggest = true;
          if (qsSticky.isFixed()) {
            qsSticky.makeAbsolute((document.viewport.getScrollOffsets().top - content.cumulativeOffset().top) + qsSticky.options.shadowSize);
          }
          var qsSuggest = event.memo.container;
          qsSuggest.style.top = (qsBox.__x_qsInput.cumulativeOffset().top + qsBox.__x_qsInput.getHeight()) + 'px';
          qsSuggest.style.left = qsBox.__x_qsInput.cumulativeOffset().left;
          //qsSuggest.style.marginTop = '1.6em';
        }
      });
      Event.observe(document, 'ms:suggest:clearSuggestions', function(event) {
        if (event.memo.suggest.fld == qsBox.__x_qsInput) {
          qsBox.__x_qsInput._activeSuggest = false;
          qsSticky.resetPosition();
        }
      });
    }
  }

  var docContent = $('mainContentArea');
  if (docContent) {
    docContent.style.position = 'relative';

    var docActions = $('document-actions');
    if (docActions) {
      docActions.addClassName('absolute');
      var daSticky  = new StickyBox(docActions, docContent, {shadowSize : 6});
    }

    var toc = $('table-of-contents');
    if (toc) {
      toc.addClassName('absolute');
      var tocSticky = new StickyBox(toc, docContent, {shadowSize : 6});
    }
  }
});</code>
</property>
<property>
<name>Form behavior</name>
</property>
<property>
<parse></parse>
</property>
<property>
<use>currentPage</use>
</property>
</object>
<object>
<class>
<name>XWiki.JavaScriptExtension</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<cache>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>cache</name>
<number>5</number>
<prettyName>Caching policy</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>long|short|default|forbid</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</cache>
<code>
<disabled>0</disabled>
<name>code</name>
<number>2</number>
<prettyName>Code</prettyName>
<rows>20</rows>
<size>50</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</code>
<name>
<disabled>0</disabled>
<name>name</name>
<number>1</number>
<prettyName>Name</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</name>
<parse>
<disabled>0</disabled>
<displayFormType>select</displayFormType>
<displayType>yesno</displayType>
<name>parse</name>
<number>4</number>
<prettyName>Parse content</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</parse>
<use>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>use</name>
<number>3</number>
<prettyName>Use this extension</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</use>
</class>
<name>ClinicalInformationCode.PatientSheetUI</name>
<number>3</number>
<className>XWiki.JavaScriptExtension</className>
<guid>a0b2957f-46c1-4784-a861-b38d168c29b1</guid>
<property>
<cache>long</cache>
</property>
<property>
<code>document.observe('dom:loaded', function() {

    // Only do this in edit mode:
    if (!$('inline')) {return;}

    // ------------------------------------------------------------------------
    // Enable value-controlled visibility

    var visibilityControllers = $$('.controlled-group .controller input[type=checkbox]');

    var controlVisibility = function(controller) {
      if (typeof (controller.element) == 'function') {
         return controlVisibility(controller.element());
      }
      if (!controller.__controlled) {
        controller.__controlled = controller.up('.controlled-group').select('.controlled');
      }
      if (controller.checked) {
         controller.__controlled.invoke('setStyle', {'visibility' : 'hidden'});
      } else {
         controller.__controlled.invoke('setStyle', {'visibility' : 'visible'});
      }
    }

    visibilityControllers.each(function (item) {
       controlVisibility(item);
       item.observe('change', controlVisibility);
    });

    // ------------------------------------------------------------------------
    // Live validation of the date of birth
    
    var hasErrors = false;
    
    var dateValidation = function (value) {
      if (!value || !value.match(/^(0[1-9]|1[012])[/](0[1-9]|[12][0-9]|3[01])[/](19|20)\d\d$/)) {
	return false;
      }
      var parts = value.split("/");
      var month = parseInt(parts[0]);
      var day = parseInt(parts[1]);
      var year = parseInt(parts[2]);
      if (((month == 4 || month == 6 || month == 9 || month == 11) &amp;&amp; day &gt; 30) ||
          (month == 2 &amp;&amp; (day &gt; 29 || (year % 4 != 0 || year % 100 == 0 &amp;&amp; year % 400 != 0) &amp;&amp; day &gt; 28))) {
        return false;
      }
      return true;
    }
    
    var markIfHasErrors = function(inputHasErrors, input) {
      if (!input) {
        return false;
      }
      var label = null;
      if (input.id) {
        label = input.up('.mandatory').down("label[for=" + input.id + "]");
        if (!label) {
          label = input.up('.mandatory').down("label");
        }
      }
      if (inputHasErrors) {
        input.addClassName('wrongValue');
        if (label) {
          label.addClassName('wrongValue');
        }
        return true;
      } else {
        input.removeClassName('wrongValue');
        if (label) {
          label.removeClassName('wrongValue');
        }
        return false;
      }
    }
    
    $$('.mandatory.date input[type=text]').invoke('observe', 'blur', function (event) {
      var dateField = event.element();
      markIfHasErrors(!dateValidation(dateField.value), dateField);
    });
    
    $$('.mandatory input[type=text]:not(.suggested, .mapping)').invoke('observe', 'blur', function (event) {
      var input = event.element();
      markIfHasErrors((!input.value || input.value.strip() == ""), input);
    });
    
    // ------------------------------------------------------------------------
    // Prevent form submission if there's missing data

    try {
    $('inline').observe('submit', function(event) {
      var form = event.element();
      var hasErrors = false;

      $$('.mandatory.date input[type=text]').each(function (dateField) {
       hasErrors =  markIfHasErrors(!dateValidation(dateField.value), dateField) || hasErrors;
      });
    
      $$('.mandatory input[type=text]:not(.suggested, .mapping)').each(function (input) {
        hasErrors = markIfHasErrors((!input.value || input.value.strip() == ""), input) || hasErrors;
      });

      var hasVal = new Object();
      var titles = new Object();

      $$('.mandatory input[type=checkbox], .mandatory input[type=radio]').each(function (input) {
        hasVal[input.name] = hasVal[input.name] || (input.value != '' &amp;&amp; input.checked);
        titles[input.name] = input.up('.mandatory').down('.group-title');
      });
      for (var inputName in hasVal) {
         if (!hasVal[inputName]) {
           hasErrors = true;
	   if (titles[inputName]) {
	     titles[inputName].addClassName('wrongValue');
	   }
	 } else {
	   if (titles[inputName]) {
	     titles[inputName].removeClassName('wrongValue');
	   }
	 }
      }
      
      if (hasErrors) {

        // ------------------------------------------------------------------------
        // The data has errors. Prevent submission and show fields with errors
	if (!form.down('div.errormessage')) {
	   form.insert({'top' : new Element('div', {'class' : 'errormessage'}).update("Some mandatory fields are missing or have incorrect values.")});
	}
	form.scrollTo();
        event.stop();
      } else {

        // ------------------------------------------------------------------------
        // Everything looks fine.
        // Update the data to be submitted

        var __updateNewValues = function(section) {
           var target = section.down('input.mapping');
           if (target) {
             var value = '';
             var newValueInputs = section.select('.accepted-suggestions input[type=checkbox]');
             for (var i = 0; i &lt; newValueInputs.length; ++i) {
                if (newValueInputs[i].checked) {
                  value += newValueInputs[i].value + '|';
                }
             }
             var otherValuesInput = section.down('input[type=text].suggested.accept-value');
             if (otherValuesInput) {
               var otherValues = otherValuesInput.value;
               if (otherValuesInput.hasClassName('multi')) {
                 otherValues = otherValues.replace(/\s*,\s*/g, "|");
               }
               value += otherValues;
             }
             target.value = value;
           }
        }
        form.select('.phenotype-group').each(__updateNewValues);
      }
    });
    } catch (error) { /* No form? No problem */ }
});</code>
</property>
<property>
<name>Form validation</name>
</property>
<property>
<parse></parse>
</property>
<property>
<use>currentPage</use>
</property>
</object>
<object>
<class>
<name>XWiki.JavaScriptExtension</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<cache>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>cache</name>
<number>5</number>
<prettyName>Caching policy</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>long|short|default|forbid</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</cache>
<code>
<disabled>0</disabled>
<name>code</name>
<number>2</number>
<prettyName>Code</prettyName>
<rows>20</rows>
<size>50</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</code>
<name>
<disabled>0</disabled>
<name>name</name>
<number>1</number>
<prettyName>Name</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</name>
<parse>
<disabled>0</disabled>
<displayFormType>select</displayFormType>
<displayType>yesno</displayType>
<name>parse</name>
<number>4</number>
<prettyName>Parse content</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</parse>
<use>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>use</name>
<number>3</number>
<prettyName>Use this extension</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</use>
</class>
<name>ClinicalInformationCode.PatientSheetUI</name>
<number>4</number>
<className>XWiki.JavaScriptExtension</className>
<guid>5bef4aa8-4f23-4e20-b54e-54f918c3d219</guid>
<property>
<cache>long</cache>
</property>
<property>
<code>document.observe('dom:loaded', function() {
    var jumpToPubmed = function(termID) {
       var label = termID.up('label');
       var li = label.up('li');
       var url = "http://www.ncbi.nlm.nih.gov/pubmed?term=" + termID.value;
       var link = new Element('a', {'target': '_blank', 'title' : "See this article on pubmed", 'href' : url});
       label.wrap(link);
       $('pubmed-search-history').down('ul').insert({'top' : li});
       window.open(url);
       $('pubmed-search-history').down('h4').removeClassName('hidden');
    }
    // ------------------------------------------------------------------------
    // Creation of suggest widgets
    
    // hpo: namespace:medical_genetics
    // go : namespace:
    var suggestionsMapping = {
        "hpo" : {
            script: "$xwiki.getURL('ClinicalInformationCode.SolrService', 'get')?",
            queryProcessor: typeof(MS.widgets.SolrQueryProcessor) == "undefined" ? null : new MS.widgets.SolrQueryProcessor({
                           'name' : { 'stub': true, 'boost': 50 },
                           'synonym' : { 'stub': true, 'boost': 50 },
                           'text' : { 'stub': true, 'default': true },
                           'id' : {'activationRegex' : 'HP:[0-9]+', 'stub': true, 'boost' : 50}
                         }, {
                           'term_category': ['HP:0000118']
                         }),
            varname: "q",
            noresults: "No matching terms",
            json: true,
            resultsParameter : "rows",
            resultId : "id",
            resultValue : "name",
            resultCategory : "term_category",
            resultInfo : {
                           "Definition"    : {"selector"  : "def",
                                              "processor" : function(text) { return text.replace(/\s*\n\s*/, ' ').replace(/`([^`]+)`\s+\(([A-Z]+:[0-9]+)`?\)/g, '&lt;em title="$2"&gt;$1&lt;/em&gt;'); }
                                             },
                           "Synonyms"      : {"selector"  : "synonym"},
		           "Related terms" : {"extern" : true,
		                              "processor" : function(trigger) {
							      trigger._obrowser = new MS.widgets.OntologyBrowser(this, null, {
								 isTermSelected : isPhenotypeSelected,
								 unselectTerm : unselectPhenotype
							      });
							      trigger.observe('click', function(event){
								event.stop();
								event.element()._obrowser.show(
								  event.element().up('.suggestItem').down('.suggestId').firstChild.nodeValue
								);
							      }.bindAsEventListener(this));
							    }
			                      }
                         },
            enableHierarchy: true,
            resultParent : "is_a",
            fadeOnClear : false,
            timeout : 30000,
            parentContainer : null
        },
        "omim" : {
            script: "$xwiki.getURL('ClinicalInformationCode.OmimService', 'get')?",
            varname: "q",
            noresults: "No matching terms",
            json: false,
            resultsParameter : "DocSum",
            resultId : "Id",
            resultValue : "Item[Name=Title]",
            resultInfo : {
                           "Synonyms"   : {"selector"  : "Item[Name=AltTitles]"},
                           "Locus"          : {"selector"  : "Item[Name=Locus]"}
                         },
            enableHierarchy: false,
            fadeOnClear : false,
            timeout : 30000,
            parentContainer : null
        },
        "pubmed" : {
            script: "$xwiki.getURL('ClinicalInformationCode.PubMedService', 'get')?",
            varname: "q",
            noresults: "No matching articles",
            json: false,
            resultsParameter : "DocSum",
            resultId : "Id",
            resultValue : "Item[Name=Title]",
            resultInfo : {
                           "Authors"   : {"selector"  : "Item[Name=AuthorList] Item[Name=Author]"},
                           "Date"      : {"selector"  : "Item[Name=EPubDate]"},
                           "Journal"   : {"selector"  : "Item[Name=Source]"}
                         },
            enableHierarchy: false,
            fadeOnClear : false,
            timeout : 30000,
            parentContainer : null
        }
    };
    var pickerSpecialClassOptions = {
      'defaultPicker' : {},
      'generateShortList' : {
                  'showKey' : true,
                  'showTooltip' : false,
                  'showDeleteTool' : true,
                  'enableSort' : false,
                  'showClearTool' : false,
                  'inputType': 'checkbox'
                },
      'generateCheckboxes' : {
                  'showKey' : false,
                  'showTooltip' : false,
                  'showDeleteTool' : true,
                  'enableSort' : false,
                  'showClearTool' : false,
                  'inputType': 'checkbox',
                  'listInsertionElt' : '.label-other',
                  'listInsertionPosition' : 'before',
                  'onItemAdded' : enableHighlightChecked,
                  'acceptFreeText' : true
                },
      'quickSearch' : {
                  'showKey' : false,
                  'showTooltip' : false,
                  'showDeleteTool' : true,
                  'enableSort' : false,
                  'showClearTool' : false,
                  'inputType': 'checkbox',
                  'listInsertionElt' : $(document.documentElement).down('.phenotype-info .phenotype-group:last-child .phenotypes-main'),
                  'listInsertionPosition' : 'top',
                  'silent' : true,
                  'onItemAdded' : restoreCategory
                },
      'portal' : {
                  'showKey' : false,
                  'showTooltip' : false,
                  'showDeleteTool' : false,
                  'enableSort' : false,
                  'showClearTool' : true,
                  'inputType': 'checkbox',
                  'listInsertionElt' : $('pubmed-search-history'),
                  'listInsertionPosition' : 'bottom',
                  'silent' : true,
                  'onItemAdded' : jumpToPubmed
                }
    }
    // -----------------------------------------------------------------
    // Create and attach the suggests
    // -----------------------------------------------------------------
    if (typeof(MS.widgets.Suggest) != "undefined") {
      var keys = Object.keys(suggestionsMapping);
      var specialClasses = Object.keys(pickerSpecialClassOptions);
      for (var i = 0; i &lt; keys.length; i++) {
        var selector = 'input.suggest-' + keys[i];
        $$(selector).each(function(item) {
          if (!item.hasClassName('initialized')) {
            item._customOptions = Object.clone(suggestionsMapping[keys[i]]);
            item._restriction = item.up('.phenotype-group')
            if (item._restriction) {
              item._restriction = item._restriction.down('input[name=_category]');
              if (item._restriction &amp;&amp; item._restriction.value.strip() != '') {
                item._restriction = item._restriction.value.strip().split(",");
              } else {
                item._restriction == null;
              }
            }
            if (item._customOptions.queryProcessor &amp;&amp; item._restriction) {
              item._customOptions.queryProcessor = Object.clone(item._customOptions.queryProcessor);
	      item._customOptions.queryProcessor.restriction = {
                'term_category' : item._restriction
              }
            }
            // Create the Suggest.
            item._suggest = new MS.widgets.Suggest(item, item._customOptions);
            if (item.hasClassName('multi') &amp;&amp; typeof(MS.widgets.SuggestPicker) != "undefined") {
              var multiSuggestOptions = {};
              for (var j = 0; j &lt; specialClasses.length; j++) {
                if (item.hasClassName(specialClasses[j])) {
                  multiSuggestOptions = pickerSpecialClassOptions[specialClasses[j]];
                  break;
                }
              }
              var suggestPicker = new MS.widgets.SuggestPicker(item, item._suggest, multiSuggestOptions);
              item._suggestPicker = suggestPicker;

              // Integrate the custom fields
              // 1. find the container element displaying them
              var customFieldsContainer = suggestPicker.list.up().down('.custom-display-data');
              if (customFieldsContainer) {
                 // 2. get rid of the container
                 customFieldsContainer.remove();
                 // 3. find all the values and display them as part of the multi suggest picker
                 suggestPicker.silent = true;
                 customFieldsContainer.select('label input[type="checkbox"]').each(function(entry) {
                   suggestPicker.addItem(entry.value, entry.nextSibling.nodeValue, '', entry.up('label').next('.term-category'));
                 });
                 suggestPicker.silent = false;
              }
 
            }
            item.addClassName('initialized');
          }
        });
      }

      // Add dropdowns to all predefined elements
      $$('.phenotype-group, .prenatal_phenotype-info').each(function(group) {
        var sugestedInput = group.down('.suggested.multi');
        if (sugestedInput) {
          group.select('.phenotypes-main label.term-label &gt; input[type=checkbox]').each(function(item) {
            if (!item.up('.subsection')) {
            item._dropDown = new MS.widgets.DropDown(item.up('label'));
            item._ontologyBrowser = new MS.widgets.OntologyBrowser(
              sugestedInput._suggest,
              item._dropDown,
              {
                isTermSelected : isPhenotypeSelected,
                unselectTerm : unselectPhenotype,
                showParents: false,
                showRoot: false,
                defaultEntryAction: 'select',
                enableBrowse: false
              }
            );
            item._trigger = new Element('span', {'class' : 'expand-tool'}).update(item._ontologyBrowser._getExpandCollapseSymbol(true));
            item._trigger._source = item;
            item._trigger._root = item.up('label');
            item._trigger._root.insert({'top' : item._trigger});
            if (item._trigger._root.hasClassName('dropdown-root')) {
            item._trigger.observe('click', function(event) {
              event.stop();
              var trigger =  event.element();
              var source  =  trigger._source;
              var root    =  trigger._root;

              if (root._expanded) {
                source._ontologyBrowser.hide();
              } else {
                source._ontologyBrowser.show(source.value);
              }

              trigger.update(source._ontologyBrowser._getExpandCollapseSymbol(root._expanded));
              root._expanded = !root._expanded;
            });
            } else {
              item._trigger.addClassName('disabled');
            }
          }
          });
        }
      });
    }
});</code>
</property>
<property>
<name>Term suggest</name>
</property>
<property>
<parse>1</parse>
</property>
<property>
<use>currentPage</use>
</property>
</object>
<object>
<class>
<name>XWiki.JavaScriptExtension</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<cache>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>cache</name>
<number>5</number>
<prettyName>Caching policy</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>long|short|default|forbid</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</cache>
<code>
<disabled>0</disabled>
<name>code</name>
<number>2</number>
<prettyName>Code</prettyName>
<rows>20</rows>
<size>50</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</code>
<name>
<disabled>0</disabled>
<name>name</name>
<number>1</number>
<prettyName>Name</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</name>
<parse>
<disabled>0</disabled>
<displayFormType>select</displayFormType>
<displayType>yesno</displayType>
<name>parse</name>
<number>4</number>
<prettyName>Parse content</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</parse>
<use>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>use</name>
<number>3</number>
<prettyName>Use this extension</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</use>
</class>
<name>ClinicalInformationCode.PatientSheetUI</name>
<number>5</number>
<className>XWiki.JavaScriptExtension</className>
<guid>1ff4c592-3029-49ae-ac68-17e2cefcfb43</guid>
<property>
<cache>long</cache>
</property>
<property>
<code>var ExtraData = (function (ExtraData) {
  var tools = ExtraData.tools = ExtraData.tools || {};
  tools.Editor = Class.create({
    initialize : function () {
      $$('.extradata-list a.delete').invoke('observe', 'click', this.ajaxDeleteData.bindAsEventListener(this));
      $$('.list-actions a.add').invoke('observe', 'click', this.ajaxAddData.bindAsEventListener(this));
    },
    ajaxDeleteData : function (event) {
      event.stop();
      var deleteTrigger = event.element();
      if (deleteTrigger.disabled) {
         return;
      }
      new XWiki.widgets.ConfirmedAjaxRequest(deleteTrigger.href, {
        onCreate : function() {
          deleteTrigger.disabled = true
        },
        onSuccess : function() {
          var dataRow = deleteTrigger.up('tr');
          var dataTable = deleteTrigger.up('table');
          if (dataRow) {
            dataRow.remove();
          }
          if (dataTable) {
            var i = 1;
            dataTable.select('th.row-count').each(function(item) {
              item.update((i++));
            });
          }
        },
        onComplete : function() {
          deleteTrigger.disabled = false;
        }
      },
      {
         confirmationText : "Are you sure you wish to delete this row?"
      });
    },
    ajaxAddData : function (event) {
      event.stop();
      var addTrigger = event.element();
      if (addTrigger.disabled) {
         return;
      }
      var classname = '';
      try {
        var classname = /classname=([^&amp;]+)/.exec(addTrigger.href)[1];
      } catch (err) {
         new XWiki.widgets.Notification('Cannot add data: type not found', 'error');
         return;
      }
      var dataTable = $('extradata-list-' + classname);
      if (!dataTable) {
        new XWiki.widgets.Notification("Cannot find the list to update " + classname, 'error');
      }
      var url = addTrigger.href.replace(/(&amp;xredirect=[^&amp;]*)/m, '$1' + encodeURIComponent('?&amp;xpage=plain&amp;xaction=lastentry&amp;dataClassName=' + classname + '&amp;withLabel=' + dataTable.hasClassName('withLabel')));
      new Ajax.Request(url, {
        onCreate : function() {
          addTrigger.disabled = true
          addTrigger._x_notif = new XWiki.widgets.Notification('Adding...', 'inprogress');
        },
        onSuccess : function (response) {
          addTrigger._x_notif.hide();
          var rowHead = '';
          if (dataTable.hasClassName('withCounter')) {
            var idx = dataTable.select('.row-count').size() + 1;
            rowHead = '&lt;th scope="row" class="row-count"&gt;' + idx + '&lt;/th&gt;';
          }
          dataTable.down('tbody').insert({'bottom' : '&lt;tr class="new"&gt;' + rowHead + response.responseText + '&lt;/tr&gt;'});
          var lastAdded = dataTable.down('.new');
          lastAdded.down('a.delete').observe('click', this.ajaxDeleteData.bindAsEventListener(this));
          lastAdded.removeClassName('new');
        }.bind(this),
        onFailure : function(response) {
          var failureReason = response.statusText;
          if (response.statusText == '' /* No response */ || response.status == 12031 /* In IE */) {
            failureReason = 'Server not responding';
          }
          if (addTrigger._x_notif) {
            addTrigger._x_notif.replace(new XWiki.widgets.Notification("Failed: " + failureReason, "error"));
          } else {
            new XWiki.widgets.Notification(this.interactionParameters.failureMessageText + failureReason, "error");
          }
        },
        on1223 : function(response) {
          response.request.options.onSuccess(response);
        },
        on0 : function(response) {
          response.request.options.onFailure(response);
        },
        onComplete : function() {
          addTrigger.disabled = false
        }
      });
    }
  });
  return ExtraData;
}(ExtraData || {}));

document.observe('xwiki:dom:loaded', function() {
  new ExtraData.tools.Editor();
})</code>
</property>
<property>
<name>Add/Remove data associated with the patient report</name>
</property>
<property>
<parse>1</parse>
</property>
<property>
<use>currentPage</use>
</property>
</object>
<object>
<class>
<name>XWiki.JavaScriptExtension</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<cache>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>cache</name>
<number>5</number>
<prettyName>Caching policy</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>long|short|default|forbid</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</cache>
<code>
<disabled>0</disabled>
<name>code</name>
<number>2</number>
<prettyName>Code</prettyName>
<rows>20</rows>
<size>50</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</code>
<name>
<disabled>0</disabled>
<name>name</name>
<number>1</number>
<prettyName>Name</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</name>
<parse>
<disabled>0</disabled>
<displayFormType>select</displayFormType>
<displayType>yesno</displayType>
<name>parse</name>
<number>4</number>
<prettyName>Parse content</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</parse>
<use>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>use</name>
<number>3</number>
<prettyName>Use this extension</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</use>
</class>
<name>ClinicalInformationCode.PatientSheetUI</name>
<number>6</number>
<className>XWiki.JavaScriptExtension</className>
<guid>297fd397-f8d7-47e4-b554-384046aaa007</guid>
<property>
<cache>forbid</cache>
</property>
<property>
<code>document.observe('xwiki:dom:loaded', function() {
  // Only do this in edit mode
  if (XWiki.contextaction != 'edit') { return; }
  var form = $('edit') || $('inline');
  if (!form) {return; }
  var formToken = form.form_token &amp;&amp; form.form_token.value;

  // What the form initially looked like
  var originalFormData = form.serialize();

  // Warn users when they navigate away from this page without submitting the form, if the data changed
  /*window.onbeforeunload = function(uEvent) {
    if (originalFormData != form.serialize()) {
      return "There are unsaved changes on this page. Are you sure you wish to leave?";
    }
  };
  form.observe('submit', function(event) {
     window.onbeforeunload = function() {};
  });*/

  // Obtain the number of the loaded version
  var originalVersion = ($$("meta[name=version]").length &gt; 0) ? $$("meta[name=version]")[0].content : false;

  // What could happen on cancel:
  var __getRollbackURL = function (version) {
    return XWiki.currentDocument.getURL('rollback', 'rev=' + version + "&amp;confirm=1&amp;form_token=" + formToken);
  }
  var deleteURL =  XWiki.currentDocument.getURL('delete', "confirm=1&amp;form_token=" + formToken);
  var NEW_DOCUMENT = 'none';

  if (originalVersion) {
     var cancelURL = __getRollbackURL(originalVersion);
  }

  var versionProviderURL = XWiki.currentDocument.getRestURL();
  var __getDocumentVersionFromREST = function(xml) {
    var version = xml.getElementsByTagName('version');
    if (version.length &gt; 0) {
       return version[0].firstChild.nodeValue;
    }
    return false;
  };

  // In background, check if the document actually exists; if not, it should be deleted on cancel
  // (non-existing documents have 1.1 in their meta version)
  new Ajax.Request(
            versionProviderURL, {
              method: 'get',
              onSuccess : function (response) {
                // only update if the information was unavailable in the meta section
                if (!originalVersion &amp;&amp; (originalVersion = __getDocumentVersionFromREST(response.responseXML))) {
                   cancelURL = __getRollbackURL(originalVersion);
                }
              },
              onFailure : function (response) {
                if (response.statusCode == 404) {
                   //Document missing
                   originalVersion = NEW_DOCUMENT;
                   cancelURL = deleteURL;
                }
              }.bind(this)
            }
      );

  //form.select('input[name=action_cancel]').invoke('stopOserving', 'click');
  form.select('input[name=action_cancel]').invoke('observe', 'click', function (event) {
    // Continue with the default behavior if the cancel action is being forced after form version verification
    // or if at this point we still have no information regarding the original document version
    if (form._isVersionVerified || !originalVersion || !cancelURL) { return; }
    Event.stop(event);
    // Find the current version
    new Ajax.Request(
            versionProviderURL,
            {
              method: 'get',
              onCreate : function() {
                form._isVersionVerified = true; 
              },
              onSuccess : function(response) {
                var crtVersion = __getDocumentVersionFromREST(response.responseXML);
                window.onbeforeunload = function() {};
                if (crtVersion &amp;&amp; crtVersion != originalVersion) {
                  // Go to the original state (i.e. rollback or delete)
                  window.location = cancelURL;
                } else {
                  //just cancel
                  event.element().click();
                }
              }.bind(this),
              onFailure : function (response) {
                window.onbeforeunload = function() {};
                // Fail silently
                event.element().click();
              }.bind(this),
              on0 : function (response) {
                response.request.options.onFailure(response);
              }
            }
      );
  });
});</code>
</property>
<property>
<name>Fix uncancellable object changes</name>
</property>
<property>
<parse>1</parse>
</property>
<property>
<use>onDemand</use>
</property>
</object>
<object>
<class>
<name>XWiki.JavaScriptExtension</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<cache>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>cache</name>
<number>5</number>
<prettyName>Caching policy</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>long|short|default|forbid</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</cache>
<code>
<disabled>0</disabled>
<name>code</name>
<number>2</number>
<prettyName>Code</prettyName>
<rows>20</rows>
<size>50</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</code>
<name>
<disabled>0</disabled>
<name>name</name>
<number>1</number>
<prettyName>Name</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</name>
<parse>
<disabled>0</disabled>
<displayFormType>select</displayFormType>
<displayType>yesno</displayType>
<name>parse</name>
<number>4</number>
<prettyName>Parse content</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</parse>
<use>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>use</name>
<number>3</number>
<prettyName>Use this extension</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</use>
</class>
<name>ClinicalInformationCode.PatientSheetUI</name>
<number>7</number>
<className>XWiki.JavaScriptExtension</className>
<guid>c5e3eab9-1e8c-4935-a6f4-825937f81ec5</guid>
<property>
<cache>long</cache>
</property>
<property>
<code>document.observe('xwiki:dom:loaded', function() {
  // TODO: make sure events work on all browsers
  $$('.extradata-list td.weight input, .extradata-list td.height input').invoke('observe', 'keyup', function(event) {
    var elt = event.element();
    var row = elt &amp;&amp; elt.up('tr');
    if (row) {
      var target = row.down('td.bmi input');
      if (!target) {return}
      var weight = row.down('td.weight input');
      var height = row.down('td.height input');
      if (weight &amp;&amp; weight.value &amp;&amp; height &amp;&amp; height.value) {
        var h = parseInt(height.value);
        var w = parseInt(weight.value);
        target.value = Math.round(w * 1000000.0 / (h * h))/100.0;
      } else {
        target.value = '';
      }
      var displayedValue = target.next('div.displayed-value');
      if (displayedValue) {
        displayedValue.update(target.value);
        if (target.value == '') {
           displayedValue.update('-');
           displayedValue.title = '';
           displayedValue.removeClassName('above-normal');
           displayedValue.removeClassName('below-normal');
           displayedValue.removeClassName('normal');
        }
        if (target.value &lt; 18.5) {
           displayedValue.title = 'Below normal value';
           displayedValue.removeClassName('above-normal');
           displayedValue.removeClassName('normal');
           displayedValue.addClassName('below-normal');
        } else if (target.value &gt; 25.5) {
           displayedValue.title = 'Above normal value';
           displayedValue.addClassName('above-normal');
           displayedValue.removeClassName('normal');
           displayedValue.removeClassName('below-normal');
        } else {
           displayedValue.title = 'Normal value';
           displayedValue.removeClassName('above-normal');
           displayedValue.removeClassName('below-normal');
           displayedValue.addClassName('normal');
        }
      }
    }
  });
});</code>
</property>
<property>
<name>Automatic computation of growth parameters</name>
</property>
<property>
<parse></parse>
</property>
<property>
<use>currentPage</use>
</property>
</object>
<object>
<class>
<name>XWiki.StyleSheetExtension</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<cache>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>cache</name>
<number>5</number>
<prettyName>Caching policy</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>long|short|default|forbid</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</cache>
<code>
<disabled>0</disabled>
<name>code</name>
<number>2</number>
<prettyName>Code</prettyName>
<rows>20</rows>
<size>50</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</code>
<name>
<disabled>0</disabled>
<name>name</name>
<number>1</number>
<prettyName>Name</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</name>
<parse>
<disabled>0</disabled>
<displayFormType>select</displayFormType>
<displayType>yesno</displayType>
<name>parse</name>
<number>4</number>
<prettyName>Parse content</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</parse>
<use>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>use</name>
<number>3</number>
<prettyName>Use this extension</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</use>
</class>
<name>ClinicalInformationCode.PatientSheetUI</name>
<number>0</number>
<className>XWiki.StyleSheetExtension</className>
<guid>3107f5aa-1450-46df-be7b-af4e79cbe51f</guid>
<property>
<cache>long</cache>
</property>
<property>
<code>#template('colorThemeInit.vm')
/** ----------------------------------------------------------- */
/** Default style fixes **/
#xwikicontent {
  overflow: visible;
}
.xwiki-form-listclass {
    display: inline-block;
}
.xwiki-form-listclass input[type="radio"][value=""], option[value=""] {
  display: none;
}
input[type=text], textarea {
  width: 100%;
  -moz-border-radius: 4px;
  -webkit-border-radius: 4px;
  border-radius: 4px;
}
textarea {
  width: 98%;
}
input[type=text]:focus, textarea:focus {
  border-color: $theme.linkColor;
  -moz-box-shadow: 0 0 4px $theme.borderColor;
  box-shadow: 0 0 4px $theme.borderColor;
}
.clinical-info .fullScreenEditLinkContainer {
  display: none !important;
}
.errormessage {
  background-color: $theme.highlightColor;
}
.suggestItems .suggestValue {
  color: $theme.textColor;
}
.suggestItem .related-terms {
  font-size: 125%;
  font-weight: bold;
  float: right;
  margin: 0;
  padding: 2px .5em;
  color: $theme.buttonPrimaryTextColor;
  background-color: $theme.buttonPrimaryBackgroundColor;
  -moz-border-radius: 2px;
  -webkit-border-radius: 2px;
  border-radius: 2px;
}
.suggestItem .related-terms a {
  color: $theme.buttonPrimaryTextColor;
}
/** ----------------------------------------------------------- */
/** ----------------------------------------------------------- */
/** Layout **/
.invisible {
  display: none !important;
}
.clear {
  display: block;
  float: none;
  clear: both;
}
.twothird-width {
  width: 67%;
}
.half-width {
  width: 48.5%;
  margin-right: 1%;
  float: left;
}
.third-width {
  width: 32%;
  float: left;
  margin-right: 1%;
}
/** ----------------------------------------------------------- */
/** Specific form elements **/
.hint {
  color: $theme.textSecondaryColor;
  font-size: 70%;
  padding: 0;
  margin: 0;
  font-style: normal;
}
.chapter {
  margin: 1em 0;
  padding-left: 14px;
  position: relative
}
.chapter h2 {
  color: $theme.linkColor;
  font-size: 1.2em;
  margin-left: -14px;
  text-transform: uppercase;
}
.fieldset .displayed-value p {
  line-height: 1.4em;
  margin: 0;
}
.fieldset .displayed-value {
  margin: 0 0 0.5em;
}
label.selected, label.subterm-selected {
  background-color: $theme.backgroundSecondaryColor;
  background-image: none;
  font-weight: bold;
  padding-left: 4px;
  margin-left: -4px;
  -moz-border-radius: 2px;
  -webkit-border-radius: 2px;
  border-radius: 2px;
}
label.subterm-selected {
  background-image: url("$xwiki.getSkinFile('icons/silk/shading.gif')");
  background-position: 14px center;
  background-repeat: no-repeat;
}
label.subterm-selected input[type="checkbox"] {
  opacity: .2;
}
label.selected input[type="checkbox"] {
  opacity: 1;
}
.wrongValue {
  color: $theme.notificationErrorColor !important;
  font-weight: bold;
}
input.wrongValue {
  border: 1px solid $theme.notificationErrorColor;
  background-color: $theme.highlightColor;
  color: $theme.textColor !important;
  font-weight: normal;
}
/** ----------------------------------------------------------- */
/** Patient info zone **/
.patient-info .fieldset {
  margin: .3em 0 !important;
}
.patient-info .family_study {
  margin-top: 1.2em ! important;
}
.patient-info .side {
  padding-top: .3em;
}
.patient-info label.section {
  font-weight: bold;
}
/** ----------------------------------------------------------- */
/** Quick search box &amp; suggest */
.emphasized-box { 
  background: $theme.backgroundSecondaryColor;
  border: 1px solid $theme.backgroundSecondaryColor;
  -webkit-box-shadow: 0 0 4px rgba(0, 0, 0, 0.2), inset 0 0 50px rgba(0, 0, 0, 0.15);
  -moz-box-shadow: 0 0 4px rgba(0, 0, 0, 0.2), inset 0 0 50px rgba(0, 0, 0, 0.15);
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.2), inset 0 0 50px rgba(0, 0, 0, 0.15);
}
.quick-search-box {
  border: 0 none;
  float: right;
  width: 29%;
  position: absolute;
  top: 0;
  right: 0;
}
.quick-search-box fieldset {
  border: 1px solid $theme.backgroundSecondaryColor;
  padding: .5em .8em;
}
.quick-search-box .section{
  margin: 0.5em 0;
}
/** ----------------------------------------------------------- */
/** PubMed search box &amp; suggest */
.pubmed-search-box {
  width: 42.5% !important;
  position: absolute;
  top: auto;
  bottom: -1.4em !important;
  margin-right: -46% !important;
}
.pubmed-search-box fieldset {
  border: 1px solid $theme.backgroundSecondaryColor;
  padding: .5em .8em;
}
#pubmed-search-history ul {
  max-height: 5em;
  overflow: auto;
  font-size: .8em;
}
#pubmed-search-history h4 {
  margin-bottom: 0;
}
#pubmed-search-history ul li {
  padding-left: 20px;
  background-image: url("$xwiki.getSkinFile('icons/silk/page.gif')");
  background-position: left 2px;
  background-repeat: no-repeat;
}
#pubmed-search-history ul li input{
  display: none;
}
/** ----------------------------------------------------------- */
/** Clinical info zone **/
/** view mode **/
.viewbody .clinical-info .displayed-value {
  padding-left: 8px;
  margin-left: 8px;
  border-left: 2px solid $theme.borderColor;
}
.clinical-info label {
  display: inline-block;
  width: 100%;
}
.value-checked, .viewbody .clinical-info label.section {
  padding-left: 18px;
  background: transparent none left 40% no-repeat;
}
.viewbody .subsection {
  margin-left: 18px;
}
.viewbody .subsection .value-checked {
  background-image: url("$xwiki.getSkinFile('icons/silk/bullet_blue.gif')");
}
/** edit mode **/
.editbody .clinical-info label.section {
  line-height: 1.4em;
}
.editbody .clinical-info label.section:before {
  content: "\25bc";
  display: inline-block;
  color: $theme.textSecondaryColor;
  font-size: .75em;
  top: -0.5em;
  text-shadow: 0 0 5px $theme.textSecondaryColor;
  opacity: .3;
}
.phenotypes-main {
  position: relative;
}
.phenotypes-main .hint {
  margin-left: 20px;
}
.subsection {
  margin-left: 1.3em;
}
.subsection .phenotypes-main br {
  display: none;
}
.subsection .phenotypes-main label {
  float: left;
  margin: 0 1% 0 0;
  padding: 0 8px;
  width: auto;
  font-weight: normal !important;
}
.subsection .phenotypes-main label.section {
  clear: both;
  display: block;
  float: none;
}
/** -------------------------------------------- **/
/** Suggestions **/
.accepted-suggestions li .delete-tool, .clear-tool {
    background-color: $theme.buttonPrimaryBackgroundColor;
    color: $theme.buttonPrimaryTextColor;
    -moz-border-radius: 3px;
    -webkit-border-radius: 3px;
    border-radius: 3px;
    padding: 2px;
}</code>
</property>
<property>
<name>Patient sheet UI</name>
</property>
<property>
<parse>1</parse>
</property>
<property>
<use>currentPage</use>
</property>
</object>
<object>
<class>
<name>XWiki.StyleSheetExtension</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<cache>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>cache</name>
<number>5</number>
<prettyName>Caching policy</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>long|short|default|forbid</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</cache>
<code>
<disabled>0</disabled>
<name>code</name>
<number>2</number>
<prettyName>Code</prettyName>
<rows>20</rows>
<size>50</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
</code>
<name>
<disabled>0</disabled>
<name>name</name>
<number>1</number>
<prettyName>Name</prettyName>
<size>30</size>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.StringClass</classType>
</name>
<parse>
<disabled>0</disabled>
<displayFormType>select</displayFormType>
<displayType>yesno</displayType>
<name>parse</name>
<number>4</number>
<prettyName>Parse content</prettyName>
<unmodifiable>0</unmodifiable>
<classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
</parse>
<use>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>use</name>
<number>3</number>
<prettyName>Use this extension</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<unmodifiable>0</unmodifiable>
<values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</use>
</class>
<name>ClinicalInformationCode.PatientSheetUI</name>
<number>1</number>
<className>XWiki.StyleSheetExtension</className>
<guid>fb941776-130a-4f84-a7d0-d4db921a0da3</guid>
<property>
<cache>long</cache>
</property>
<property>
<code>#template('colorThemeInit.vm')
table.extradata-list {
    width: 99%;
   margin-top: -.5em;
}
.extradata-list td, .extradata-list th {
    border: 1px solid $theme.backgroundSecondaryColor;
    border-left: 1px solid $theme.pageContentBackgroundColor;
    border-right: 1px solid $theme.pageContentBackgroundColor;
}
.extradata-list th.col-label {
    font-weight: normal;
    font-variant: small-caps;
}
.extradata th.col-label, .viewbody td {
    text-align: center;
}
.viewbody td.comments, .editbody th.comments {
    text-align: left;
    border-right: 0 none;
}
.extradata-list th.row-count {
    background: transparent;
}
.extradata-list th.row-count,
.extradata-list td.start,
.extradata-list td.end {
    text-align: right;
}
.extradata-list td.start,
.extradata-list td.end,
.extradata-list td.band {
    min-width: 6em;
}
.extradata-list th.comments {
    min-width: 20em;
}
.extradata-list .xwiki-form-listclass {
    display: block;
    white-space: nowrap;
}
.extradata-list .fullScreenEditLinkContainer {
    display: none !important;
}
.extradata-list th.actions {
  width: 24px;
  ## border-left: 0 none;
}
.extradata-list th.actions .buttonwrapper {
    display: block;
    height: 2.3em;
    position: relative;
    margin: 0;
}
.extradata-list th.actions .add-data-button {
    position: absolute;
    right: 0;
}
.list-actions {
  text-align: right;
  width: 99%;
}
.list-actions .buttonwrapper {
  text-align: left;
  margin: 0 !important;
}
table.withLabel td, table.withLabel th {
  border: 0 none;
}
table.withLabel tr:first-child th {
  display: none;
}
.extradata-list .bmi, .extradata-list .hc_percentile {
  min-width: 4em;
}
.extradata-list .normal {
  color: $theme.notificationSuccessColor;
}
.extradata-list .below-normal, .extradata-list .above-normal {
  color: $theme.notificationErrorColor;
}</code>
</property>
<property>
<name>Extra data table ui</name>
</property>
<property>
<parse>1</parse>
</property>
<property>
<use>currentPage</use>
</property>
</object>
<content>{{velocity output=false}}
#macro (__label $propName $cssClass $text)
   #set($displayedText = "$!{text}")
   #if ($displayedText == '' &amp;&amp; "$!{propName}" != '')
     #set($displayedText = "$!{class.get($propName).prettyName}:")
   #end
   #set($for = '')
   #if ("$!{propName}" != '')
     #set($for = "for='$!{class.name}_$!{obj.number}_$!{propName}'")
   #end
  {{html clean="false" wiki="false"}}&lt;label class="${cssClass}" $!{for}&gt;${displayedText}&lt;/label&gt;{{/html}}##
#end

#macro (__display $propName)
(% class="displayed-value"%)(((#if ("$!{doc.display($propName)}" == '')-#else${doc.display($propName)}#end)))##
#end

#macro (__displayIfNotEmpty $propName)
#if ($context.action == 'edit' || ($doc.display($propName) != ''))
#__label($propName '')
#__display($propName)
#end
#end

#macro (__display2Col $propName $label $groupCssClass $labelCssClass)
  (% class="fieldset ${propName} $!{groupCssClass}" %)(((
  (% class="half-width ${propName}" %)(((
    #__label(${propName} "section $!{labelCssClass}" "$!{label}")
  )))
  (% class="half-width ${propName}" %)(((
    #__display(${propName})
  )))
  )))##fieldset
#end

#macro (__displayIfNotEmpty2Col $propName $label $groupCssClass $labelCssClass)
#if ($context.action == 'edit' || $doc.display(${propName}) != '')
#__display2Col($propName $label $groupCssClass $labelCssClass)
#end
#end

#macro(__markIfMandatory $propName)#if ("$!mandatoryFields.contains($propName)" != 'false')mandatory#{end}#end

#macro (__displayHalfWidth $propName $label $groupCssClass $labelCssClass)
  (% class="half-width $groupCssClass ${propName}" %)(((
    #__label(${propName} "hint ${labelCssClass}" $label)
    #__display(${propName}, $obj)
  )))
#end 

#macro (__displayFormatted $mode $propName $label $groupCssClass $labelCssClass)
#if ("$!activeFields.contains($propName)" != 'false' &amp;&amp; ($context.action == 'edit' || $doc.display(${propName}) != ''))
  #set($_groupCssClass = "$!{groupCssClass} #__markIfMandatory($propName)")
  #if ($mode == 'half-width')
    #__displayHalfWidth($propName $label $_groupCssClass $labelCssClass)
  #elseif ($mode == '2-col')
    #__display2Col($propName $label $_groupCssClass $labelCssClass)
  #else
  (% class="$groupCssClass ${propName}" %)(((
   #__label($propName $labelCssClass $label)
   #__display($propName)
  )))
  #end
#end## field not configured as inactive, field not empty in view mode
#end

#macro (__qsBox $fieldName $cssClass)
#if ($context.action == 'edit')
(% id="quick-search-box"  class="group-other quick-search-box emphasized-box $!{cssClass}" %)(((
  {{html clean="false" wiki="false"}}
  &lt;fieldset&gt;
    &lt;h3 class="section"&gt;Quick phenotype search&lt;/h3&gt;
    &lt;label for="quick-phenotype-search"&gt;Enter a free text and choose among suggested ontology terms&lt;/label&gt;
    &lt;input type='text' name='$!{fieldName}' class='suggested multi suggest-hpo quickSearch' value='' size='16' id='quick-phenotype-search'/&gt;
  &lt;/fieldset&gt;
  {{/html}}
)))
#end
#end

## =====================================================================
##
## "Tabelar" data associated with the patient report
##
##
#macro (__extradata_deleteTool $object $anchor)
  {{html}}&lt;a class="action delete" href="$doc.getURL('objectremove', "classname=${object.xWikiClass.name}&amp;amp;classid=${object.number}&amp;amp;xredirect=$escapetool.url($doc.getURL('edit'))&amp;amp;form_token=$!{services.csrf.getToken()}#$!{anchor}")" title="Delete"&gt;Delete&lt;/a&gt;&lt;/span&gt;{{/html}}
#end

#macro (__extradata_addTool $classname $anchor)
  {{html}}&lt;span class="buttonwrapper"&gt;&lt;a class="add button add-data-button" href="$doc.getURL('objectadd', "classname=${classname}&amp;amp;xredirect=$escapetool.url($doc.getURL('edit'))&amp;amp;form_token=$!{services.csrf.getToken()}#$!{anchor}")" title='New entry'&gt;New entry&lt;/a&gt;&lt;/span&gt;{{/html}}#end

#macro (__extradata_displayTable $dataClassName $options)
  #set($dataClass = $xwiki.getDocument($dataClassName).xWikiClass)
  #if ($dataClass)
    #if ($context.action == 'view' &amp;&amp; $doc.getObjects($dataClassName).size() == 0)
      (% class="hint" %)None specified
    #else
      (% class="extradata-list#if ("$!{options.labels}" == 'true') withLabel#end#if ("$!{options.counter}" == 'true') withCounter#end" id="extradata-list-${dataClassName}" %)
      #if ("$!{options.counter}" == 'true')|=(% class="col-label" %)# #end#foreach($prop in $dataClass.properties)|=(% class="col-label $prop.name" %)$prop.prettyName#end#if ($context.action == 'edit')|=(% class="actions" %)
    #end
    #foreach ($o in $doc.getObjects($dataClassName))
      #if ("$!{options.counter}" == 'true')|=(% class="row-count" %)${velocityCount}#end#foreach($prop in $dataClass.properties)|(% class="$prop.name" %)#if ("$!{options.labels}" == 'true'){{html clean="false" wiki="false"}}&lt;label class="hint" &gt;$prop.prettyName&lt;/label&gt;{{/html}}#end$doc.display($prop.getName(), $o)#end#if ($context.action == 'edit')|(% class="actions" %)#__extradata_deleteTool($o "extradata-${dataClassName}")#end
    #end

    #if ($context.action == 'edit')(% class="list-actions" %)(((#__extradata_addTool($dataClassName "extradata-${dataClassName}"))))#end

    #end
    #end
#end

#macro (__extradata_displayLastEntry $dataClassName $withLabel)
  #set ($objects = $doc.getObjects($dataClassName))
  #if ($objects.size() &gt; 0)
    #set ($targetObj = $objects.get($mathtool.sub($objects.size(), 1)))
    #set($dataClass = $targetObj.xWikiClass)
    {{html wiki="true" clean="false"}}#foreach($prop in $dataClass.properties)&lt;td class="${prop.name}"&gt;#if ("$!{withLabel}" == 'true'){{html clean="false" wiki="false"}}&lt;label class="hint" &gt;$prop.prettyName&lt;/label&gt;{{/html}}#end$doc.display($prop.getName(), $targetObj)&lt;/td&gt;#end#if ($context.action == 'edit')&lt;td class="actions"&gt;#__extradata_deleteTool($targetObj '')&lt;/td&gt;#end{{/html}}
  #end
#end


## =====================================================================
##
## SECTIONS DISPLAY
##
##
#macro(__reportSection_display $sectionName)
  #set($cleanSectionName = $sectionName)
  #set($cleanSectionName = $cleanSectionName.replace('-', '_'))
  #evaluate("#__reportSection__${cleanSectionName}()")
#end

## =================================================================
## Patient information
##
#macro(__reportSection__patient_info)
(% class="twothird-width clear patient-info chapter" %)(((
== Patient Information ==
  #if ("$!activeFields.contains('last_name')" != false &amp;&amp; "$!activeFields.contains('first_name')" != false)
  (% class="fieldset" %)(((
    #__label('last_name' 'section clear' 'Patient name:')
    #__displayFormatted('half-width' 'last_name')
    #__displayFormatted('half-width' 'first_name')
  )))##fieldset
  #end## display first name / last name
  #__displayFormatted('2-col' 'date_of_birth' '' 'date' '')
  #__displayFormatted('2-col' 'gender' 'Sex' 'gender' 'group-title')
  #__displayFormatted('2-col' 'health_card' '' '' '')

#if ("$!activeFields.contains('relative')" != 'false' &amp;&amp; ($context.action == 'edit' || ($doc.display('relative') != '' &amp;&amp; $doc.display('relative_of') != '')))
  (% class="fieldset family_study" %)(((
  (% class="half-width relative" %)(((
    #__label('' 'section' 'Family study:') ##
    $doc.display('relative') ##
    #__label('relative_of' 'section' 'of')##
  )))
  (% class="half-width relative_of" %)(((
    #__label('relative_of' 'hint' "$!{config.getProperty('relativeReportHint').value}")
    #__display('relative_of')
  )))
  )))##fieldset
#end

#if ("$!activeFields.contains('onset')" != 'false')
  #if ($context.action == 'edit')
    $doc.display('onset')
  #else
    #__displayFormatted('2-col' 'onset' '' '' 'section')
  #end
#end
(% class="clear" %)((()))
)))##chapter
#end

## =================================================================
## Measurements
##
#macro(__reportSection__measurements)
#if ($config &amp;&amp; $config.getProperty('section__measurements').value.contains('ClinicalInformationCode.MeasurementsClass'))
(% class="twothird-width clear measurement-info chapter" %)(((
== Growth parameters ==
#__extradata_displayTable('ClinicalInformationCode.MeasurementsClass' {'counter' : false, 'labels' : true})
)))##chapter
#end
#end

## =================================================================
## Phenotype information
##
#macro(__reportSection__phenotype_info)
#if ("$!activeFields.contains('unaffected')" != 'false')
  (% class="controlled-group complete-hide" %)(((
#end
#if ("$!activeFields.contains('phenotype')" != 'false')
  (% class="clear clinical-info phenotype-info chapter #__markIfMandatory('phenotype')" %)(((
  #if ("$!activeFields.contains('unaffected')" != 'false')#set ($__qsBoxCssClass = 'controlled')#end
  #__qsBox("$!{class.name}_$!{obj.number}_phenotype" "$!{__qsBoxCssClass}")
    (% class="twothird-width chapter-inner" %)(((
    (% class="group-title" %)
    == $!{class.get('phenotype').prettyName} ==
      #if ("$!activeFields.contains('unaffected')" != 'false')
        (% class="fieldset unaffected controller" %)(((
        #if ($xcontext.action == 'edit')
          $doc.display('unaffected') #__label('unaffected' '' "$class.get('unaffected').prettyName")

          (% class="hint controlled" %)Or select observed phenotypes:(%%)
        #else
          $class.get('unaffected').prettyName
        #end
        )))
        (% class="controlled" %) (((
      #end
          $doc.display('phenotype')##
          #if ("$!activeFields.contains('negative_phenotype')" != 'false')
            (% class="negative-phenotype" %)(((
              $doc.display('negative_phenotype')
            )))## negative_phenotype
          #end
      #if ("$!activeFields.contains('unaffected')" != 'false')
        )))## controlled (phenotype)
      #end
        )))## chapter-inner
  )))## chapter
#end
#if ("$!activeFields.contains('unaffected')" != 'false')
  )))## controlled-group
#end
#end

## =================================================================
## Prenatal information
##
#macro(__reportSection__prenatal_phenotype_info)
#if ("$!activeFields.contains('prenatal_phenotype')" != 'false')
(% class="twothird-width clear clinical-info prenatal_phenotype-info chapter #__markIfMandatory('prenatal_phenotype')" %)(((
== $!{class.get('prenatal_phenotype').prettyName} ==
$doc.display('prenatal_phenotype')
)))##chapter
#end
#end

## =================================================================
## Family history
##
#macro(__reportSection__family_history)
#if ("$!activeFields.contains('family_history')" != 'false')
(% class="twothird-width clear clinical-info family_history-info chapter #__markIfMandatory('family_history')" %)(((
== $!{class.get('family_history').prettyName} ==
(((
$doc.display('family_history')
#__displayIfNotEmpty('family_comments')
)))
)))##chapter
#end
#end

## =================================================================
## Diagnosis information
##
#macro(__reportSection__diagnosis_info)
#if ("$!activeFields.contains('omim_id')" != 'false')
(% class="clear chapter twothird-width" %)(((
##(% class="diagnosis-info"%)(((
== Diagnosis ==
#__displayIfNotEmpty2Col('omim_id' '' '' '')
(% class="clear" %)(((#__displayIfNotEmpty('comments'))))
##)))
#__ncbiSBox("$!{class.name}_$!{obj.number}_phenotype" '')
(% class="clear" %)((()))
)))##chapter
#end
#end

## =================================================================
## Variants information
##
#macro(__reportSection__variant_info)
#if ($config &amp;&amp; $config.getProperty('section__variant-info').value.contains('ClinicalInformationCode.VariantClass'))
(% class="clear variant-info chapter" %)(((
== Variants ==
#__extradata_displayTable('ClinicalInformationCode.VariantClass' {'counter' : true, 'labels' : false})
)))##chapter
#end
#end

##
## =====================================================================
{{/velocity}}

{{velocity}}
#if ("$!{request.xaction}" == 'lastentry')
  #__extradata_displayLastEntry($request.dataClassName $request.withLabel)
#else
#if ($context.action != 'export')
(% id="table-of-contents" %)(((
{{toc /}}

(% class="hide-toc" id="hide-toc" %)((([[×&gt;&gt;#tmToC||title="Hide table of contents"]])))

(% class="hide-toc hide-toc-ghost" %)((([[Hide table of contents&gt;&gt;#tmToC||id="tmHideToC" class="document-action" title="Hide table of contents"]])))
)))

#end
$xwiki.ssx.use('ClinicalInformationCode.Skin', {'colorTheme' : "$xwiki.getSpacePreference('colorTheme')"})##
$xwiki.ssx.use('ClinicalInformationCode.Widgets', {'colorTheme' : "$xwiki.getSpacePreference('colorTheme')"})##
$xwiki.jsx.use('ClinicalInformationCode.Widgets')##
$xwiki.ssx.use('ClinicalInformationCode.PatientSheetUI', {'colorTheme' : "$xwiki.getSpacePreference('colorTheme')"})##
$xwiki.jsx.use('ClinicalInformationCode.PatientSheetUI')##
##
##
#set($config = $xwiki.getDocument("${doc.space}.WebHome").getObject('ClinicalInformationCode.DBConfigurationClass'))
#if ($config)
#set($obj = $doc.getObject("$!{config.getProperty('patientClass').value}"))
#set($class = $obj.xWikiClass)
#set($discard = $doc.use($obj))
#set($activeFields = $!{config.getProperty('activeFields').value})
#set($mandatoryFields = $!{config.getProperty('mandatoryFields').value})
{{include document="ClinicalInformationCode.PatientSheetMenu" /}}

#if ($context.action == 'edit')
#set($previewenabled = false)
{{html clean="false" wiki="false"}}&lt;input type='hidden' id='prefix' value='$!{class.name}_$!{obj.number}_'/&gt;{{/html}}##

#end
#else

{{warning}}**Configuration missing**{{/warning}}
#end
#end
{{/velocity}}</content></xwikidoc>
